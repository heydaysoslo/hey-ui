[{"/Users/mikepatterson/Sites/hey-ui/example/src/stories/Hello.stories.tsx":"1","/Users/mikepatterson/Sites/hey-ui/example/src/stories/Button.stories.tsx":"2","/Users/mikepatterson/Sites/hey-ui/example/src/styles/themes/defaultTheme.ts":"3","/Users/mikepatterson/Sites/hey-ui/example/src/styles/utilities/Colors.ts":"4","/Users/mikepatterson/Sites/hey-ui/example/src/styles/utilities/fontFactory.ts":"5","/Users/mikepatterson/Sites/hey-ui/example/src/styles/utilities/spacingFactory.ts":"6","/Users/mikepatterson/Sites/hey-ui/example/src/styles/utilities/breakpointsFactory.ts":"7","/Users/mikepatterson/Sites/hey-ui/example/src/styles/utilities/Converters.ts":"8","/Users/mikepatterson/Sites/hey-ui/example/src/styles/utilities/helpers.ts":"9"},{"size":91,"mtime":1612074356046,"results":"10","hashOfConfig":"11"},{"size":333,"mtime":1612074593442,"results":"12","hashOfConfig":"11"},{"size":3307,"mtime":1612072280390,"results":"13","hashOfConfig":"11"},{"size":1321,"mtime":1611864009649,"results":"14","hashOfConfig":"11"},{"size":2377,"mtime":1611864220663,"results":"15","hashOfConfig":"11"},{"size":5066,"mtime":1611864457671,"results":"16","hashOfConfig":"11"},{"size":1917,"mtime":1611862529638,"results":"17","hashOfConfig":"11"},{"size":108,"mtime":1612062533033,"results":"18","hashOfConfig":"11"},{"size":2165,"mtime":1611864274803,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"pfoto1",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},"/Users/mikepatterson/Sites/hey-ui/example/src/stories/Hello.stories.tsx",[],["43","44"],"/Users/mikepatterson/Sites/hey-ui/example/src/stories/Button.stories.tsx",[],"/Users/mikepatterson/Sites/hey-ui/example/src/styles/themes/defaultTheme.ts",[],"/Users/mikepatterson/Sites/hey-ui/example/src/styles/utilities/Colors.ts",[],"/Users/mikepatterson/Sites/hey-ui/example/src/styles/utilities/fontFactory.ts",["45"],"import { css, FlattenSimpleInterpolation } from 'styled-components'\n\nimport { responsiveFonts as fontDefs } from '../themes/defaultTheme'\nimport { bp, BreakpointKeysWithoutXs } from './breakpointsFactory'\n\nimport { remSize } from './Converters'\n\nconst px2LineHeight = (size: any, lineheight: any) => {\n  if (!size.includes('px') || !lineheight.includes('px')) {\n    console.warn(\n      `px2LineHeight() assumes px values. Size or lineheight is not spesified in px. Was ${size} ${lineheight}`\n    )\n  }\n  return (\n    Math.round(\n      (parseFloat(lineheight) / parseFloat(size) + Number.EPSILON) * 100\n    ) / 100\n  )\n}\n\nexport const createFontSizeAndLineHeight = (size: any) => {\n  const [fz, lh] =\n    typeof size === 'object' ? size.size.split('/') : size.split('/')\n  const fzUnit = fz.replace(/[0-9]/g, '').trim()\n  const fzVal = parseFloat(fz)\n  const lhUnit = lh.replace(/[0-9]/g, '').trim()\n  return css`\n    font-size: ${fzUnit === 'px' ? remSize(fzVal) : fz};\n    line-height: ${lhUnit === 'px' ? px2LineHeight(fz, lh) : lh};\n    ${size.css && size.css};\n  `\n}\ntype FontDefs = typeof fontDefs\ntype FontSizes = keyof FontDefs\ntype RequiredFontSizes = {\n  xs: string | { size: string; css: FlattenSimpleInterpolation }\n}\ntype AllFontSizes = RequiredFontSizes &\n  {\n    [bp in BreakpointKeysWithoutXs]?:\n      | string\n      | { size: string; css: FlattenSimpleInterpolation }\n  }\n\nexport type ResponsiveFonts = {\n  [size in FontSizes]: AllFontSizes | string\n}\n\nexport type fontFuncs = {\n  [size in FontSizes]: () => FlattenSimpleInterpolation\n}\n\ntype fontFactory = (args: {\n  responsiveFonts: ResponsiveFonts\n  bp: bp\n}) => fontFuncs\n\nconst fontFactory: fontFactory = ({ responsiveFonts, bp }) =>\n  Object.keys(responsiveFonts).reduce((acc, key) => {\n    acc[key] = () => {\n      if (responsiveFonts?.[key]) {\n        const val = responsiveFonts[key]\n        return typeof val === 'string'\n          ? createFontSizeAndLineHeight(val)\n          : Object.keys(val).map((bpKey) => {\n              return bpKey === 'xs'\n                ? createFontSizeAndLineHeight(val[bpKey])\n                : css`\n                    ${bp[bpKey]} {\n                      ${createFontSizeAndLineHeight(val[bpKey])}\n                    }\n                  `\n            })\n      } else {\n        return null\n      }\n    }\n    return acc\n  }, {} as fontFuncs)\n\nexport default fontFactory\n","/Users/mikepatterson/Sites/hey-ui/example/src/styles/utilities/spacingFactory.ts",["46","47"],"import {\n  css,\n  FlattenSimpleInterpolation,\n  DefaultTheme\n} from 'styled-components'\nimport { responsiveSpacing } from '../themes/defaultTheme'\nimport { bp } from './breakpointsFactory'\nimport { parseCssUnit } from './helpers'\n\nconst shorthandDefs = {\n  // Margins\n  m: ['margin'],\n  ml: ['margin-left'],\n  mt: ['margin-top'],\n  mr: ['margin-right'],\n  mb: ['margin-bottom'],\n  my: ['margin-top', 'margin-bottom'],\n  mx: ['margin-left', 'margin-right'],\n  // Padding\n  p: ['padding'],\n  pl: ['padding-left'],\n  pt: ['padding-top'],\n  pr: ['padding-right'],\n  pb: ['padding-bottom'],\n  py: ['padding-top', 'padding-bottom'],\n  px: ['padding-left', 'padding-right'],\n  // Grid\n  gap: ['grid-gap'],\n  // Positions\n  top: ['top'],\n  bottom: ['bottom'],\n  left: ['left'],\n  right: ['right'],\n  height: ['height']\n} as const\n\n/**\n * Testing\n * https://www.typescriptlang.org/docs/handbook/utility-types.html\n */\n\nconst shorthandValues = Object.keys(shorthandDefs).reduce((res, key) => {\n  shorthandDefs[key].map((val: any) => res.push(val))\n  return res\n}, [] as string[])\n\nexport type spacingShorthands2 = Record<keyof typeof shorthandDefs, string>\nexport type hello = typeof shorthandDefs\nexport type hello2 = Omit<typeof shorthandValues, 'description'>\nexport type hello3 = {\n  [K in keyof typeof shorthandDefs]: typeof shorthandDefs[K]\n}\n\nconst shorthands = Object.keys(shorthandDefs).reduce((acc, key) => {\n  acc[key] = (value: string) => () => {\n    return css`\n      ${shorthandDefs[key].map(\n        (prop: string) => css`\n          ${prop}: ${value};\n        `\n      )}\n    `\n  }\n  return acc\n}, {})\n\nexport type spacingShorthands = keyof typeof shorthandDefs\n\ntype spacingFunctionOptions = {\n  multiplier?: number\n  negative?: boolean\n}\n\nexport type spacingFunctionArgs = {\n  val: string\n  cssProps: spacingShorthands | spacingShorthands[]\n  options?: spacingFunctionOptions\n}\n\ntype addSpacingProps = (\n  props: spacingShorthands | spacingShorthands[],\n  value: any\n) => FlattenSimpleInterpolation\n\nconst addSpacingProps: addSpacingProps = (props = 'mb', value) => {\n  if (typeof props === 'string') {\n    return shorthands[props](value)\n  } else if (Array.isArray(props)) {\n    return css`\n      ${props.map((prop) => {\n        if (!shorthands[prop]) {\n          console.warn(\n            `addSpacingProp: the method ${prop} does not exist on spacing`\n          )\n          return null\n        }\n        return shorthands[prop](value)\n      })}\n    `\n  }\n}\n\nconst applyPropValueOptions = (value: any, options: any) => {\n  // Leave early if we don't have a value\n  if (!value) {\n    return value\n  }\n  // Apply multiplier if its a number\n  if (!isNaN(options?.multiplier)) {\n    const unitParsed = parseCssUnit(value)\n    if (unitParsed.number) {\n      return `${unitParsed.number * options.multiplier}${unitParsed.unit}`\n    }\n  }\n  // Apply negative number\n  if (options?.negative) {\n    const { number, unit } = parseCssUnit(value)\n    return `-${number}${unit}`\n  }\n  return value\n}\n\nexport type SpacingSizes = keyof typeof responsiveSpacing\n\nexport type SpacingFuncs = {\n  [size in SpacingSizes]: (\n    props: spacingShorthands | spacingShorthands[],\n    options?: spacingFunctionOptions\n  ) => FlattenSimpleInterpolation\n}\n\nexport type SpacingFuncsWithFunc = SpacingFuncs & {\n  func: (args: spacingFunctionArgs) => FlattenSimpleInterpolation\n}\n\nexport type spacingFactory = (args: {\n  responsiveSpacing: typeof responsiveSpacing\n  bp: Omit<bp, 'below' | 'only'>\n}) => SpacingFuncsWithFunc\n\nconst spacingFactory: spacingFactory = ({ responsiveSpacing, bp }) => {\n  // Generate spacing functions\n  const spacingFunctions = Object.keys(responsiveSpacing).reduce((acc, key) => {\n    // Make spacing key accessible as object (ie: spacing.gutter)\n    acc[key] = (props: any, options = {}) => ({\n      theme\n    }: {\n      theme: DefaultTheme\n    }) => {\n      // Map through all breakpoints for current spacing setting\n      return Object.keys(responsiveSpacing[key]).map((bpKey) => {\n        // value can either be a theme.spacingUnit.key or a regular unit (like 10px)\n        const value = responsiveSpacing[key][bpKey]\n        const unit = theme?.spacingUnit?.[value] || value\n        if (bp?.[bpKey]) {\n          return css`\n            ${bp[bpKey]} {\n              ${addSpacingProps(props, applyPropValueOptions(unit, options))};\n            }\n          `\n        } else {\n          if (bpKey === 'xs') {\n            return css`\n              ${addSpacingProps(props, applyPropValueOptions(unit, options))}\n            `\n          } else {\n            console.warn(`Breakpoint key: ${bpKey} does not exist.`)\n            return null\n          }\n        }\n      })\n    }\n    return acc\n  }, {} as SpacingFuncs)\n\n  // Make generic spacing function\n  const spacingFunction = ({ val, cssProps, options }: spacingFunctionArgs) => {\n    return css`\n      ${addSpacingProps(cssProps, applyPropValueOptions(val, options))};\n    `\n  }\n\n  // Export function object\n  return {\n    ...spacingFunctions,\n    func: spacingFunction\n  }\n}\n\nexport default spacingFactory\n","/Users/mikepatterson/Sites/hey-ui/example/src/styles/utilities/breakpointsFactory.ts",["48"],"import { emSize } from './Converters'\nimport { breakpoints } from '../themes/defaultTheme'\n\nexport type Breakpoints = typeof breakpoints\nexport type BreakpointKeys = keyof Breakpoints\n\nexport type BreakpointSizes = Record<keyof Breakpoints, string>\nexport type BreakpointSizesWithoutXs = Omit<BreakpointSizes, 'xs'>\nexport type BreakpointKeysWithoutXs = keyof BreakpointSizesWithoutXs\n\nexport type bp = BreakpointSizesWithoutXs & {\n  below: BreakpointSizesWithoutXs\n  only: BreakpointSizes\n}\n\ntype breakpointsFactory = (breakpoints: Breakpoints) => bp\n\nexport const breakpointsFactory: breakpointsFactory = breakpoints => ({\n  xs: `@media (min-width: ${emSize(breakpoints.xs)})`,\n  sm: `@media (min-width: ${emSize(breakpoints.sm)})`,\n  md: `@media (min-width: ${emSize(breakpoints.md)})`,\n  lg: `@media (min-width: ${emSize(breakpoints.lg)})`,\n  xl: `@media (min-width: ${emSize(breakpoints.xl)})`,\n  xxl: `@media (min-width: ${emSize(breakpoints.xxl)})`,\n\n  below: {\n    sm: `@media (max-width: ${emSize(breakpoints.sm - 1)})`,\n    md: `@media (max-width: ${emSize(breakpoints.md - 1)})`,\n    lg: `@media (max-width: ${emSize(breakpoints.lg - 1)})`,\n    xl: `@media (max-width: ${emSize(breakpoints.xl - 1)})`,\n    xxl: `@media (max-width: ${emSize(breakpoints.xxl - 1)})`\n  },\n\n  only: {\n    xs: `@media (max-width: ${emSize(breakpoints.sm - 1)})`,\n    sm: `@media (min-width: ${emSize(breakpoints.sm)}) and (max-width: ${emSize(\n      breakpoints.md - 1\n    )})`,\n    md: `@media (min-width: ${emSize(breakpoints.md)}) and (max-width: ${emSize(\n      breakpoints.lg - 1\n    )})`,\n    lg: `@media (min-width: ${emSize(breakpoints.lg)}) and (max-width: ${emSize(\n      breakpoints.xl - 1\n    )})`,\n    xl: `@media (min-width: ${emSize(breakpoints.xl)}) and (max-width: ${emSize(\n      breakpoints.xxl - 1\n    )})`,\n    xxl: `@media (min-width: ${emSize(breakpoints.xxl)})`\n  }\n})\n\nexport default breakpointsFactory\n","/Users/mikepatterson/Sites/hey-ui/example/src/styles/utilities/Converters.ts",[],"/Users/mikepatterson/Sites/hey-ui/example/src/styles/utilities/helpers.ts",["49"],"import {\n  css,\n  DefaultTheme,\n  FlattenSimpleInterpolation\n} from 'styled-components'\n\n/**\n * 'mb', '20px' => 'margin-botton: 20px'\n * 'mb, ml', '20px' => 'margin-botton: 20px; margin-left: 20px'\n * 'mb', spacing.xs => 'margin-bottom: 1rem'\n *\n * @param {*} propsString string of spacing mixins (my, mx, pb...)\n * @param {*} value the value you want to insert for the props\n */\n\n// export const addSpacingProps = (propsString = 'mb', value) => {\n//   if (typeof propsString !== 'string') {\n//     console.log(\n//       `addSpacingProps propsString needs to be a string was ${typeof propsString}`,\n//       propsString,\n//       value\n//     )\n//     return null\n//   }\n//   const props = propsString.split(',').map(prop => prop.trim())\n//   return css`\n//     ${props.map(prop => {\n//       if (!spacing[prop]) {\n//         console.warn(\n//           `addSpacingProp: the method ${prop} does not exist on spacing`\n//         )\n//         return null\n//       }\n//       return spacing[prop](value)\n//     })}\n//   `\n// }\n\nexport const addProps = (propsString: any, value: any) => {\n  const props = propsString.split(',').map((prop: any) => prop.trim())\n  return css`\n    ${props.map(\n      (prop: any) => css`\n        ${prop}: ${value};\n      `\n    )}\n  `\n}\n\n/**\n * Parses css unit and returns object with number and unit separated\n * @param {string|number} cssUnit CSS length unit (1em, 2rem, 3vh, 4vw, 100%, ...)\n * @returns {object} float and unit separated {number:float, unit:string}\n */\nexport const parseCssUnit = (cssUnit: any) => {\n  const number = parseFloat(cssUnit)\n  // Leave early if a unitless number is passed\n  if (!isNaN(cssUnit)) {\n    return { number, unit: '' }\n  }\n  const unit = cssUnit.replace(/^[-\\d.]+/, '')\n  return { number, unit }\n}\n\ntype applyModifier = (\n  modifier: string,\n  css: FlattenSimpleInterpolation\n) => (args: {\n  theme: DefaultTheme\n  modifiers?: string[] | string | null | undefined\n}) => FlattenSimpleInterpolation | null\n\nexport const applyModifier: applyModifier = (modifier, css) => ({\n  modifiers\n}) => {\n  if (!modifiers) return null\n  return modifiers === modifier || modifiers.includes(modifier) ? css : null\n}\n",{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":58,"column":7,"nodeType":"56","messageId":"57","endLine":58,"endColumn":31},{"ruleId":"54","severity":1,"message":"58","line":85,"column":7,"nodeType":"56","messageId":"57","endLine":85,"endColumn":39},{"ruleId":"54","severity":1,"message":"59","line":141,"column":7,"nodeType":"56","messageId":"57","endLine":141,"endColumn":37},{"ruleId":"54","severity":1,"message":"60","line":18,"column":14,"nodeType":"56","messageId":"57","endLine":18,"endColumn":52},{"ruleId":"54","severity":1,"message":"61","line":73,"column":14,"nodeType":"56","messageId":"57","endLine":73,"endColumn":42},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"@typescript-eslint/no-redeclare","'fontFactory' is already defined.","Identifier","redeclared","'addSpacingProps' is already defined.","'spacingFactory' is already defined.","'breakpointsFactory' is already defined.","'applyModifier' is already defined.","no-global-assign","no-unsafe-negation"]